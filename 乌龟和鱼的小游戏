
'''
按以下要求编写定义一个乌龟类和鱼类并尝试编写游戏
  1.假设游戏场景为范围(x,y)0<=x<=10,0<=y<=10
  2.游戏生成一个乌龟和10条鱼
  3.它们的移动方向均随机
  4.乌龟的最大移动能力为2(它可以随机的选择1还是2移动)，鱼的最大移动能力为1
  5.当移动到场景边缘，自动向反方向移动
  6.乌龟初始化体力为100(上线)
  7.乌龟每移动一次，体力消耗1
  8.当乌龟和鱼坐标重叠，乌龟吃掉鱼，乌龟体力增加20
  9.鱼暂不计算体力
  10.当乌龟体力值为0(挂掉)或者鱼儿的数量为0游戏结束
'''


# encoding:utf-8

import random


legal_x = [0, 10]
legal_y = [0, 10]

class Turtle:

    def __init__(self):
        # 初始体力
        self.power = 100

        # 初始位置随机

        self.x = random.randint(0, 10)
        self.y = random.randint(0, 10)

    def move(self):
        # 随机计算方向并移动到新的位置(x,y)
        new_x = self.x + random.choice([1, 2, -1, -2])
        new_y = self.y + random.choice([1, 2, -1, -2])

        # 检查移动后是否超出场景x轴边界

        if new_x < 0:
            self.x = 0 - (new_x - 0)
        elif new_x > 10:
            self.x = 10 - (new_x - 10)
        else:
            self.x = new_x

        # 检查移动后是否超出场景y轴边界

        if new_y < 0:
            self.y = 0 - (new_y - 0)
        elif new_y > 10:
            self.y = 10 - (new_y - 10)
        else:
            self.y = new_y

        # 体力消耗
        self.power -= 1
        # 返回移动后的新位置
        return self.x, self.y

    def eat(self):
        self.power += 20
        if self.power > 100:
            self.power = 100


class Fish:
    def __init__(self):

        self.x = random.randint(0, 10)
        self.y = random.randint(0, 10)

    def move(self):
        # 随机计算方向并移动到新的位置(x,y)
        new_x = self.x + random.choice([1, -1])
        new_y = self.y + random.choice([1, -1])

        # 检查移动后是否超出场景x轴边界

        if new_x < 0:
            self.x = 0 - (new_x - 0)
        elif new_x > 10:
            self.x = 10 - (new_x - 10)
        else:
            self.x = new_x

        # 检查移动后是否超出场景y轴边界

        if new_y < 0:
            self.y = 0 - (new_y - 0)
        elif new_y > 10:
            self.y = 10 - (new_y - 10)
        else:
            self.y = new_y

        # 返回移动后的新位置
        return self.x, self.y



tur = Turtle()
fish = []
for i in range(10):
    new_fish = Fish()
    fish.append(new_fish)

while True:
    if not len(fish):
        print('鱼儿都吃完了，游戏结束！')
        break

    if not tur.power:
        print('乌龟体力耗尽, 挂掉了！')
        break

    pos = tur.move()

    for each_fish in fish[:]:
        if each_fish.move() == pos:
            # 鱼儿被吃掉了
            tur.eat()
            fish.remove(each_fish)
            print('有一条鱼被吃掉了-----')
